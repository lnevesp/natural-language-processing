BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(1000, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 1000
df = data.frame(t =seq(1000, from=1),
B1 = GenerateBM(seed=10),
B2 = GenerateBM(seed=20),
B3 = GenerateBM(seed=30),
B3 = GenerateBM(seed=40))
df <- melt(df, id.vars="t")
colnames(df) = c("Time", "BM", "B")
ggplot(df, aes(x=Time, y=B, col=BM)) + geom_line()
library(ggplot2)
library(reshape2)
GenerateBM <- function(seed){
set.seed(seed)
BM = vector()
BM[0] = 0
BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(1000, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 1000
df = data.frame(t =seq(1000, from=1),
B1 = GenerateBM(seed=10),
B2 = GenerateBM(seed=20),
B3 = GenerateBM(seed=30),
B3 = GenerateBM(seed=30))
df <- melt(df, id.vars="t")
colnames(df) = c("Time", "BM", "B")
ggplot(df, aes(x=Time, y=B, col=BM)) + geom_line()
library(ggplot2)
library(reshape2)
GenerateBM <- function(seed){
set.seed(seed)
BM = vector()
BM[0] = 0
BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(1000, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 1000
df = data.frame(t =seq(1000, from=1),
B1 = GenerateBM(seed=1991),
B2 = GenerateBM(seed=1989),
B3 = GenerateBM(seed=1958),
B3 = GenerateBM(seed=2016))
df <- melt(df, id.vars="t")
colnames(df) = c("Time", "BM", "B")
ggplot(df, aes(x=Time, y=B, col=BM)) + geom_line()
ggplot(df, aes(x=Time, y=B, col=BM)) + geom_line()
library(ggplot2)
library(reshape2)
GenerateBM <- function(seed){
set.seed(seed)
BM = vector()
BM[0] = 0
BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(1000, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 10000
df = data.frame(t =seq(n, from=1),
B1 = GenerateBM(seed=1991),
B2 = GenerateBM(seed=1989),
B3 = GenerateBM(seed=1958),
B4 = GenerateBM(seed=2016))
df <- melt(df, id.vars="t")
colnames(df) = c("Time", "BM", "B")
ggplot(df, aes(x=Time, y=B, col=BM)) + geom_line()
library(ggplot2)
library(reshape2)
GenerateBM <- function(n, seed){
set.seed(seed)
BM = vector()
BM[0] = 0
BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(n, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 10000
df = data.frame(t =seq(n, from=1),
B1 = GenerateBM(n, seed=1991),
B2 = GenerateBM(n, seed=1989),
B3 = GenerateBM(n, seed=1958),
B4 = GenerateBM(n, seed=2016))
df <- melt(df, id.vars="t")
colnames(df) = c("Time", "BM", "B")
ggplot(df, aes(x=Time, y=B, col=BM)) + geom_line()
library(ggplot2)
library(reshape2)
GenerateBM <- function(n, seed){
set.seed(seed)
BM = vector()
BM[0] = 0
BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(n, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 1000000
df = data.frame(t =seq(n, from=1),
B1 = GenerateBM(n, seed=1991),
B2 = GenerateBM(n, seed=1989),
B3 = GenerateBM(n, seed=1958),
B4 = GenerateBM(n, seed=2016))
library(ggplot2)
library(reshape2)
GenerateBM <- function(n, seed){
set.seed(seed)
BM = vector()
BM[0] = 0
BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(n, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 100000
df = data.frame(t =seq(n, from=1),
B1 = GenerateBM(n, seed=1991),
B2 = GenerateBM(n, seed=1989),
B3 = GenerateBM(n, seed=1958),
B4 = GenerateBM(n, seed=2016))
library(ggplot2)
library(reshape2)
GenerateBM <- function(n, seed){
set.seed(seed)
BM = vector()
BM[0] = 0
BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(n, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 50000
df = data.frame(t =seq(n, from=1),
B1 = GenerateBM(n, seed=1991),
B2 = GenerateBM(n, seed=1989),
B3 = GenerateBM(n, seed=1958),
B4 = GenerateBM(n, seed=2016))
df <- melt(df, id.vars="t")
colnames(df) = c("Time", "BM", "B")
ggplot(df, aes(x=Time, y=B, col=BM)) + geom_line()
library(ggplot2)
library(reshape2)
GenerateBM <- function(n, seed){
set.seed(seed)
BM = vector()
BM[0] = 0
BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(n, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 50000
df = data.frame(t =seq(n, from=1),
B1 = GenerateBM(n, seed=1991),
B2 = GenerateBM(n, seed=1989),
B3 = GenerateBM(n, seed=1958),
B4 = GenerateBM(n, seed=2016)
B4 = GenerateBM(n, seed=26577))
df <- melt(df, id.vars="t")
colnames(df) = c("Time", "BM", "B")
ggplot(df, aes(x=Time, y=B, col=BM)) + geom_line()
library(ggplot2)
library(reshape2)
GenerateBM <- function(n, seed){
set.seed(seed)
BM = vector()
BM[0] = 0
BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(n, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 50000
df = data.frame(t =seq(n, from=1),
B1 = GenerateBM(n, seed=1991),
B2 = GenerateBM(n, seed=1989),
B3 = GenerateBM(n, seed=1958),
B4 = GenerateBM(n, seed=2016),
B5 = GenerateBM(n, seed=26577))
df <- melt(df, id.vars="t")
colnames(df) = c("Time", "BM", "B")
ggplot(df, aes(x=Time, y=B, col=BM)) + geom_line()
library(ggplot2)
library(reshape2)
GenerateBM <- function(n, seed){
set.seed(seed)
BM = vector()
BM[0] = 0
BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(n, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 5000
df = data.frame(t =seq(n, from=1),
B1 = GenerateBM(n, seed=1991),
B2 = GenerateBM(n, seed=1989),
B3 = GenerateBM(n, seed=1958),
B4 = GenerateBM(n, seed=2016),
B5 = GenerateBM(n, seed=26577))
df <- melt(df, id.vars="t")
colnames(df) = c("Time", "BM", "B")
ggplot(df, aes(x=Time, y=B, col=BM)) + geom_line()
library(ggplot2)
library(reshape2)
GenerateBM <- function(n, seed){
set.seed(seed)
BM = vector()
BM[0] = 0
BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(n, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 500
df = data.frame(t =seq(n, from=1),
B1 = GenerateBM(n, seed=1991),
B2 = GenerateBM(n, seed=1989),
B3 = GenerateBM(n, seed=1958),
B4 = GenerateBM(n, seed=2016),
B5 = GenerateBM(n, seed=26577))
df <- melt(df, id.vars="t")
colnames(df) = c("Time", "BM", "B")
ggplot(df, aes(x=Time, y=B, col=BM)) + geom_line()
library(ggplot2)
library(reshape2)
GenerateBM <- function(n, seed){
set.seed(seed)
BM = vector()
BM[0] = 0
BM[1] = rnorm(1, 0, 1)
i=1
for (i in seq(n, from=2)){
BM[i] = rnorm(1,0,1) + BM[i-1]
}
return(BM)
}
n = 500
df = data.frame(t =seq(n, from=1),
B1 = GenerateBM(n, seed=1991),
B2 = GenerateBM(n, seed=1989),
B3 = GenerateBM(n, seed=1958),
B4 = GenerateBM(n, seed=2016),
B5 = GenerateBM(n, seed=26577))
df <- melt(df, id.vars="t")
colnames(df) = c("Time", "BM", "B")
ggplot(df, aes(x=Time, y=B, col=BM)) + geom_line()
getOption("repos")
if (!require("shiny")) install.packages('shiny', repos='https://cran.rstudio.com/'); library(shiny)
if (!require("shinydashboard")) install.packages("shinydashboard"); library(shinydashboard)
if (!require("devtools")) install.packages("devtools"); library(devtools)
install_github('rCharts', 'ramnathv'); library(rCharts)
if (!require("wordcloud2")) install.packages("wordcloud2"); library(wordcloud2)
if (!require("data.table")) install.packages("data.table"); library(data.table)
if (!require("dygraphs")) install.packages("dygraphs"); library(dygraphs)
if (!require("PerformanceAnalytics")) install.packages("PerformanceAnalytics"); library(PerformanceAnalytics)
if (!require("networkD3")) install.packages("networkD3"); library(networkD3)
if (!require("dplyr")) install.packages("dplyr"); library(dplyr)
if (!require("DT")) install.packages("DT"); library(DT)
if (!require("DT")) install.packages("DT"); library(DT)
install.packages("DT")
shiny::runApp('Dropbox/Data Science/Xtralab/Xtralab Analytics/Dashboard - V0.3/03_Dashboard_V0.2')
if (!require("shiny")) install.packages('shiny', repos='https://cran.rstudio.com/'); library(shiny)
if (!require("shinydashboard")) install.packages("shinydashboard"); library(shinydashboard)
if (!require("devtools")) install.packages("devtools"); library(devtools)
install_github('rCharts', 'ramnathv'); library(rCharts)
library(rCharts)
if (!require("wordcloud2")) install.packages("wordcloud2"); library(wordcloud2)
if (!require("data.table")) install.packages("data.table"); library(data.table)
if (!require("dygraphs")) install.packages("dygraphs"); library(dygraphs)
if (!require("PerformanceAnalytics")) install.packages("PerformanceAnalytics"); library(PerformanceAnalytics)
if (!require("networkD3")) install.packages("networkD3"); library(networkD3)
if (!require("dplyr")) install.packages("dplyr"); library(dplyr)
if (!require("DT")) install.packages("DT"); library(DT)
runApp('Dropbox/Data Science/Xtralab/Xtralab Analytics/Dashboard - V0.3/03_Dashboard_V0.2')
library(shiny)
library(shinydashboard)
ui <- shinyUI(
dashboardPage(
dashboardHeader(title = "Some Header"),
dashboardSidebar(
sidebarMenu(
menuItem("Computations", tabName = "tabItem1", icon = icon("dashboard")),
menuItem("Results", tabName = "tabItem2", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "tabItem1",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
),
infoBoxOutput("out1")
),
tabItem(tabName = "tabItem2",
h2("Widgets tab content")
)
)
)
)
)
server <- function(input, output){
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
output$out1 <- renderInfoBox({
infoBox("Completed",
a("Computation Completed", onclick = "openTab('tabItem2')"),
tags$script(HTML("
var openTab = function(tabName){
$('a', $('.sidebar')).each(function() {
if(this.getAttribute('data-value') == tabName) {
this.click()
};
});
}
")),
icon = icon("thumbs-o-up"), color = "green"
)
})
}
shinyApp(ui, server)
if (!require("gdata")) install.packages("gdata"); library(gdata);
# Load Data
df = read.xls ("inddata.xlsx"), sheet = 1, header = TRUE)
df = read.xls ("inddata.xlsx", sheet = 1, header = TRUE)
View(df)
len(df)
dim(df)
View(df)
dim(df[2])
ncol(df)
df[,1:2]
l <- list(a = 1,b = "foo",c = 1:5)
l
l$d <- "asdf"
l
is.na(l$d)
# Load Data
df = read.xls ("inddata.xlsx", sheet = 1, header = TRUE)
# Divide data
dictInd = list()
IndNames = c("Ibovespa", "MICEX", "Nifty50", "Shanghai", "FTSE")
for (i in ncol(df))
if i <> ncol(df)
if sum(is.na(df[,i])) > 0 & sum(is.na(df[,i+1])) > 0
dictInd$i = dataframe(df(,i:i+1))
if (!require("gdata")) install.packages("gdata"); library(gdata);
# Load Data
df = read.xls ("inddata.xlsx", sheet = 1, header = TRUE)
# Divide data
dictInd = list()
IndNames = c("Ibovespa", "MICEX", "Nifty50", "Shanghai", "FTSE")
for (i in ncol(df)){
if i <> ncol(df)
if sum(is.na(df[,i])) > 0 & sum(is.na(df[,i+1])) > 0
dictInd$i = dataframe(df(,i:i+1))
}
if (!require("gdata")) install.packages("gdata"); library(gdata);
# Load Data
df = read.xls ("inddata.xlsx", sheet = 1, header = TRUE)
# Divide data
dictInd = list()
IndNames = c("Ibovespa", "MICEX", "Nifty50", "Shanghai", "FTSE")
for (i in ncol(df)){
if i <> ncol(df){
if sum(is.na(df[,i])) > 0 & sum(is.na(df[,i+1])) > 0{
dictInd$i = dataframe(df(,i:i+1))
{}
}
}
if (!require("gdata")) install.packages("gdata"); library(gdata);
# Load Data
df = read.xls ("inddata.xlsx", sheet = 1, header = TRUE)
# Divide data
dictInd = list()
IndNames = c("Ibovespa", "MICEX", "Nifty50", "Shanghai", "FTSE")
for (i in ncol(df)){
if i <> ncol(df){
if sum(is.na(df[,i])) > 0 & sum(is.na(df[,i+1])) > 0{
dictInd$i = dataframe(df(,i:i+1))
}
}
}
if (!require("gdata")) install.packages("gdata"); library(gdata);
# Load Data
df = read.xls ("inddata.xlsx", sheet = 1, header = TRUE)
# Divide data
dictInd = list()
IndNames = c("Ibovespa", "MICEX", "Nifty50", "Shanghai", "FTSE")
for (i in ncol(df)){
if (i <> ncol(df)){
if sum(is.na(df[,i])) > 0 & sum(is.na(df[,i+1])) > 0{
dictInd$i = dataframe(df(,i:i+1))
}
}
}
if (!require("gdata")) install.packages("gdata"); library(gdata);
# Load Data
df = read.xls ("inddata.xlsx", sheet = 1, header = TRUE)
# Divide data
dictInd = list()
IndNames = c("Ibovespa", "MICEX", "Nifty50", "Shanghai", "FTSE")
for (i in ncol(df)) {
if (i <> ncol(df)) {
if (sum(is.na(df[,i])) > 0 & sum(is.na(df[,i+1])) > 0) {
dictInd$i = dataframe(df(,i:i+1))
}
}
}
if (!require("gdata")) install.packages("gdata"); library(gdata);
# Load Data
df = read.xls ("inddata.xlsx", sheet = 1, header = TRUE)
# Divide data
dictInd = list()
IndNames = c("Ibovespa", "MICEX", "Nifty50", "Shanghai", "FTSE")
for (i in ncol(df)) {
if (i != ncol(df)) {
if (sum(is.na(df[,i])) > 0 & sum(is.na(df[,i+1])) > 0) {
dictInd$i = dataframe(df(,i:i+1))
}
}
}
(sum(is.na(df[,1])
)
)
(sum(is.na(df[,2])))
(sum(is.na(df[,1])) > 0 & sum(is.na(df[,2])) > 0)
df[,1]
if (!require("gdata")) install.packages("gdata"); library(gdata);
# Load Data
df = read.xls ("inddata.xlsx", sheet = 1, header = TRUE)
# Divide data
dictInd = list()
IndNames = c("Ibovespa", "MICEX", "Nifty50", "Shanghai", "FTSE")
for (i in ncol(df)) {
if (i != ncol(df)) {
if (sum(is.na(df[,i])) == 0 & sum(is.na(df[,i+1])) == 0) {
dictInd$i = dataframe(df(,i:i+1))
}
}
}
dictInd
i = 1
dictInd$i = dataframe(df(,i:i+1))
dictInd$i = (df(,i:i+1))
df1 = (df(,i:i+1))
if (!require("gdata")) install.packages("gdata"); library(gdata);
# Load Data
df = read.xls ("inddata.xlsx", sheet = 1, header = TRUE)
# Divide data
dictInd = list()
IndNames = c("Ibovespa", "MICEX", "Nifty50", "Shanghai", "FTSE")
for (i in ncol(df)) {
if (i != ncol(df)) {
if (sum(is.na(df[,i])) == 0 & sum(is.na(df[,i+1])) == 0) {
dictInd$i = (df[,i:i+1])
}
}
}
dictInd$i = (df[,i:i+1])
dictInd$i = (df[,i:i+1])
df[,i:i+1]
df[, 1:2]
i
i=1
dictInd$i = (df[,i:i+1])
dictInd
suppressMessages(library(shiny))
install.packages(c("dplyr", "git2r", "igraph", "Rcpp"))
shiny::runApp('Dropbox/Data Science/Xtralab/Xtralab Analytics/Web App/Beta Versions/Dashboard - V0.3/03_Dashboard_V0.2')
runApp('Dropbox/Data Science/Xtralab/Xtralab Analytics/Web App/Beta Versions/Dashboard - V0.3/03_Dashboard_V0.2')
source('~/Dropbox/Data Science/Projects/Natural Language Process/StupidBackoff_Python/programs/DataAnalysis.R', echo=TRUE)
